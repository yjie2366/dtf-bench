#!/bin/sh

SPLIT_WRAPPER=@split_wrapper@
top_dir=@abs_top_builddir@
log_dir=${top_dir}/log

trap_int()
{
	trap - SIGINT
	echo "Execution of the benchmark is interrupted!"
	exit
}

trap trap_int SIGINT

for opts; do
	if [ "${opts:0:1}" != "-" ]; then
		shift; continue
	else
		opts=`echo ${opts} | tr -d -`
	fi
	case $opts in
		np)
			shift
			np=$1
			;;
		imax)
			shift
			imax=$1
			;;
		jmax)
			shift
			jmax=$1
			;;
		cycles)
			shift
			cycles=$1
			;;
		member)
			shift
			member=$1
			;;
		run)
			shift
			num_run=$1
			;;
		master)
			shift
			master=$1
			;;
	esac
done

if [ -z "$np" ]; then np=4; fi
if [ -z "$imax" ]; then imax=80; fi
if [ -z "$jmax" ]; then jmax=80; fi
if [ -z "$cycles" ]; then cycles=11; fi
if [ -z "$member" ]; then member=2; fi
if [ -z "$master" ]; then master=2; fi
if [ -z "$num_run" ]; then num_run=1; fi

echo "Executing benchmark with options: "
echo "Number of Processes: ${np}"
echo "Grid Size (IMAX*JMAX): ${imax}*${jmax}"
echo "Number of Ensembles: ${member}"
echo "Number of Cycles: ${cycles}"
echo "Number of Master Processes: ${master}"

SCALE_NP=$((np/member))
if [ ${master} -gt ${SCALE_NP} ];then
	master=${SCALE_NP}
fi
workgroup_size=$((SCALE_NP/master))
echo "Every ${workgroup_size} procs handled by a master process"
echo "Benchmark will run ${num_run} time(s)..."

# only report error messages by default
export DTF_VERBOSE_LEVEL=0
export DTF_GLOBAL_PATH=${top_dir}
export DTF_IGNORE_IDLE=1
export MAX_WORKGROUP_SIZE=${workgroup_size}

bin_opts="-imax=${imax} -jmax=${jmax} -member=${member} -cycles=${cycles}"
bin_scale="${top_dir}/bin/scale"
bin_letkf="${top_dir}/bin/letkf"

for run in `seq 1 ${num_run}`; do
	runlog_dir="${log_dir}/run-${np}-${master}"
	if [ ! -e "${runlog_dir}" ]; then
		mkdir -p ${runlog_dir}
	fi

	output_log="${runlog_dir}/output-${run}.log"
	error_log="${runlog_dir}/error-${run}.log"

	if [ -n "${SPLIT_WRAPPER}" ]; then
		export LD_PRELOAD=${SPLIT_WRAPPER}/libsplitworld.so
		mpiexec -n ${np} ${bin_scale} ${bin_opts} : -n ${np} ${bin_letkf} ${bin_opts} \
			> ${output_log} 2> ${error_log}
	else
		mpiexec -n ${np} ${bin_scale} ${bin_opts} > ${output_log} 2> ${error_log} &
		mpiexec	-n ${np} ${bin_letkf} ${bin_opts} > ${output_log} 2> ${error_log}
	fi

	if [ "$?" -ne 0 ]; then
		echo "Error occurred. Please check ${error_log}!"
		break
	else
		echo "Execution succeeded!"
	fi
done

trap - SIGINT
