#!/bin/sh

SPLIT_WRAPPER=@split_wrapper@
top_dir=@abs_top_builddir@
bin_scale="${top_dir}/bin/scale"
bin_letkf="${top_dir}/bin/letkf"
scale_nodes=scale.nodes
letkf_nodes=letkf.nodes
bin_opts=()
log_dir=${top_dir}/log
data_path=${top_dir}/data  #Default path
dtf_config=${top_dir}/dtf.ini

target=
mode=transfer	# Transfer mode by default
MPIEXEC=@MPIEXEC@  # Specify which mpiexec to use
launcher=@LAUNCHER@
genv_args=
bind_args=
enable_llio=0
enable_mckernel=0
core_bind=0

case `hostname` in
	*ofp*)
		target=ofp
		;;
	fn01sv*)
		target=fugaku
		;;
	*)
		echo "[ERROR] Unsupported Machine"
		exit 1
		;;
esac

trap_int()
{
	trap - SIGINT
	echo "Execution of the benchmark is interrupted!"
	exit
}

append_ppn()
{
	machine_file=$1
	ppn=$2

	sed -e "s/$/:${ppn}/" -i ${machine_file}
}

trap trap_int SIGINT

for opts; do
	if [ "${opts:0:1}" != "-" ]; then
		shift; continue
	else
		opts=`echo ${opts} | tr -d -`
		shift
	fi
	case $opts in
		imax)
			bin_opts+=("-imax=$1")
			;;
		jmax)
			bin_opts+=("-jmax=$1")
			;;
		kmax)
			bin_opts+=("-kmax=$1")
			;;
		lkmax)
			bin_opts+=("-lkmax=$1")
			;;
		ukmax)
			bin_opts+=("-ukmax=$1")
			;;
		okmax)
			bin_opts+=("-okmax=$1")
			;;
		cycles)
			bin_opts+=("-cycles=$1")
			;;
		px)
			bin_opts+=("-px=$1")
			;;
		py)
			bin_opts+=("-py=$1")
			;;
		member)
			member=$1
			bin_opts+=("-member=${member}")
			;;
		np)
			np=$1
			;;
		ppn)
			ppn=$1
			;;
		run)
			num_run=$1
			;;
		mode)
			mode=$1
			if [ "${mode}" != "transfer" -a "${mode}" != "file" ]; then
				echo "[ERROR] Designated transfer mode is not supported"
				exit -1
			fi
			;;
		master)
			master=$1
			;;
		llio)
			enable_llio=1
			;;
		mck)
			enable_mckernel=1
			MCK_PATH="$1"
			;;
		*)
			echo "$0 [ERROR]: Invalid option -$opts"
			exit
	esac
done

if [ -z "$np" ]; then np=4; fi
if [ -z "$member" ]; then member=2; fi
if [ -z "$master" ]; then master=2; fi
if [ -z "$num_run" ]; then num_run=1; fi

runlog_dir="${log_dir}/run-${np}-${master}-${member}"
output="${runlog_dir}/%n.%j.out"
error="${runlog_dir}/%n.%j.err"

# Number of processes per ensemble/member
SCALE_NP=$((np/member))
if [ ${master} -gt ${SCALE_NP} ];then
	master=${SCALE_NP}
fi
workgroup_size=$((SCALE_NP/master))

echo "Designated number of matcher: ${master}"
echo "Every ${workgroup_size} procs handled by a master process"
echo "Benchmark will run ${num_run} time(s)..."

if [ -z "${ppn}" ]; then
	ppn=${PJM_PROC_BY_NODE}
fi
echo "Number of processes per node: ${ppn}"

# Setup environment variables

export DTF_VERBOSE_LEVEL=-1 # No output from DTF by default
export DTF_GLOBAL_PATH=${top_dir}
export DTF_IGNORE_IDLE=1
export MAX_WORKGROUP_SIZE=${workgroup_size}
# Setup output data files path if LLIO is enabled
if [ ${enable_llio} -eq 1 ]; then
	data_path=${PJM_SHAREDTMP}
	export DATA_PATH=${data_path}
	echo "Data will be temporarily stored in ${DATA_PATH}"
fi

#Replace DATA_PATH in dtf configuration file
if [ ! -e "${dtf_config}" -o "${mode}" = "file" ]; then
	tmp_path=$(echo ${data_path} | sed 's/\//\\\//g')
	sed  "s/DATA_PATH/${tmp_path}/g" ${dtf_config}.in > ${dtf_config}
	sed -i "s/MODE/${mode}/g" ${dtf_config}
fi	

if [ "${target}" = "ofp" ]; then
	# Verify Intel MPI version because the default ver.2019.5
	# may not work for DTF

	ppn_args="-ppn ${ppn}"
	if [ -n "${SPLIT_WRAPPER}" ]; then
		if [ ${enable_mckernel} -eq 0 ]; then
			genv_args="-genv LD_PRELOAD ${SPLIT_WRAPPER}/libsplitworld.so"
			#env_args="-env LD_PRELOAD ${SPLIT_WRAPPER}/libsplitworld.so"
		else
			#env_args="-env LD_PRELOAD ${SPLIT_WRAPPER}/libsplitworld.so"
			#export LD_PRELOAD does not work. It will cause MPI error 
			unset SPLIT_WRAPPER # McKernel does not work with wrapper
		fi
	fi

	#impi_ver=2018.0.128 # works
	#impi_ver=2018.1.163 # works
	#impi_ver=2018.2.199 # works

	#impi_ver=2018.3.222 # NOT work NOT stable
	#impi_ver=2019.1.144 # NOT work
	#impi_ver=2019.3.199 # NOT work
	if [ "${enable_mckernel}" -eq 0 ]; then
		impi_ver=2020.4.304 
	else
		impi_ver=2018.1.163
		export PATH="${MCK_PATH}/bin:${PATH}"
		export HFI_NO_CPUAFFINITY=1
		export KMP_AFFINITY=compact
		export OMP_NUM_THREADS=4
	fi

	# Generate hostfiles from Intel MPI environment variable
	#: << COMMENT
	# Setup machine files (OFP)
	find `pwd` \( -name "${scale_nodes}" -o -name "${letkf_nodes}" \) -exec rm {} \+

	# set hostfile
	if [ -n "${PJM_O_NODEINF}" ]; then
		node_file=${PJM_O_NODEINF}
		if [ -n "${SPLIT_WRAPPER}" ]; then
			hosts_global="-f ${node_file}"
		else
			cat ${node_file} | head -n $((np/ppn)) > ${scale_nodes}
			cat ${node_file} | tail -n $((np/ppn)) > ${letkf_nodes}
			
			hosts_scale="-f ${scale_nodes}"
			hosts_letkf="-f ${letkf_nodes}"
		fi
	else
		echo "[WARNING] No hostfile found."
	fi
	#COMMENT

	module purge

	if [[ ! ${MPIEXEC} =~ .*pip.* ]]; then
		module load intel/${impi_ver}
		echo "Intel MPI version: $(which mpiexec | grep -oE "[0-9]+.[0-9]+.[0-9]+")"
	fi

	if [ -n "${launcher}" ]; then
		launcher_arg="-launcher-exec ${launcher}"
	fi

	if [ "${core_bind}" -ne 0 ] || [[ ${MPIEXEC} =~ .*pip.* ]]; then
		#bind_args="-bind-to core"
		bind_args="-bind-to rr" # bind processes to cores by round-robin
	fi
else
	if [ -n "${SPLIT_WRAPPER}" ]; then
		export LD_PRELOAD=${SPLIT_WRAPPER}/libsplitworld.so
	fi
	export PLE_MPI_STD_EMPTYFILE="off"

	# Stop printf to the same log files
	#output_args="-stdout ${output} -stderr ${error}"
fi


# Start executing benchmark binaries
for run in `seq 1 ${num_run}`; do
	if [ -n "${SPLIT_WRAPPER}" ]; then
		# print command line
		ldd ${bin_scale} # output linked libraries by default
		echo ${MPIEXEC} ${hosts_global} ${output_args} ${genv_args} ${launcher_arg} ${ppn_args} ${bind_args}\
		       	-n ${np} ${env_args} ${bin_scale} ${bin_opts[@]} :\
		       	-n ${np} ${env_args} ${bin_letkf} ${bin_opts[@]}
		${MPIEXEC} ${hosts_global} ${output_args} ${genv_args} ${launcher_arg} ${ppn_args} ${bind_args}\
		       	-n ${np} ${bin_scale} ${bin_opts[@]} :\
		       	-n ${np} ${bin_letkf} ${bin_opts[@]}
	else
		# Intel MPI will run different mpiexec processes on the same nodes
		ldd ${bin_scale} # output linked libraries by default
		echo ${MPIEXEC} ${output_args} ${genv_args} ${ppn_args} ${launcher_arg} ${bind_args}\
			-n ${np} ${hosts_scale} ${bin_scale} ${bin_opts[@]}

		${MPIEXEC} ${output_args} ${genv_args} ${ppn_args} ${launcher_arg} ${bind_args}\
			-n ${np} ${hosts_scale} ${bin_scale} ${bin_opts[@]} &
		${MPIEXEC} ${output_args} ${genv_args} ${ppn_args} ${launcher_arg} ${bind_args}\
			-n ${np} ${hosts_letkf} ${bin_letkf} ${bin_opts[@]}
	fi

	if [ "$?" -ne 0 ]; then
		echo "Error occurred. Please check error log!"
		break
	else
		echo "Execution succeeded!"
	fi
done

trap - SIGINT
